{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","monster","className","alt","src","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","useState","setMonsters","searchTerm","setSearchTerm","useEffect","fetch","then","response","json","users","e","target","value","filter","toLowerCase","includes","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2RAEaA,G,YAAO,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACnB,OACI,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAQI,GAAlC,4BACtB,6BAAKJ,EAAQK,OACb,4BAAIL,EAAQM,aCJXC,G,MAAW,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACvB,OACI,qBAAKP,UAAU,YAAf,SACKO,EAASC,KAAI,SAAAT,GACV,OAAO,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQI,WCL7BM,G,MAAY,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,aACrC,OACI,uBAAOX,UAAU,SAASY,KAAK,SAASF,YAAaA,EAAaG,SAAUF,MC6BrEG,EA3BH,WAAO,IAAD,EACkBC,mBAAS,IAD3B,mBACPR,EADO,KACGS,EADH,OAEsBD,mBAAS,IAF/B,mBAEPE,EAFO,KAEKC,EAFL,KAIdC,qBAAU,WACNC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAIR,EAAYQ,QAC5B,IAUH,OACI,sBAAKxB,UAAU,MAAf,UACI,kDACA,cAAC,EAAD,CAAWW,aAAc,SAAAc,GAAC,OAAIP,EAAcO,EAAEC,OAAOC,QAAQjB,YAAY,oBACzE,cAAC,EAAD,CAAUH,SAXWA,EAASqB,QAAO,SAAA7B,GAAO,OAC5CA,EAAQK,KAAKyB,cAAcC,SAASb,EAAWY,wBCN5CE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.4b61910a.chunk.js","sourcesContent":["import './card.styles.css'\n\nexport const Card = ({ monster }) => {\n    return (\n        <div className='card-container'>\n            <img alt='Monster' src={`https://robohash.org/${monster.id}?set=set2&size=180x180`} />\n            <h3>{monster.name}</h3>\n            <p>{monster.email}</p>\n        </div>\n    )\n}","import { Card } from '../card/card.component';\nimport './card-list.styles.css';\n\nexport const CardList = ({ monsters }) => {\n    return (\n        <div className='card-list'>\n            {monsters.map(monster => {\n                return <Card key={monster.id} monster={monster} />\n            })}\n        </div>\n    )\n}","import './search-box.styles.css'\n\nexport const SearchBox = ({ placeholder, handleChange }) => {\n    return (\n        <input className='search' type='search' placeholder={placeholder} onChange={handleChange} />\n    )\n}","import { useEffect, useState } from 'react'\n\nimport './App.css'\nimport { CardList } from './components/card-list/card-list.component'\nimport { SearchBox } from './components/search-box/search-box.component'\n\nconst App = () => {\n    const [monsters, setMonsters] = useState([])\n    const [searchTerm, setSearchTerm] = useState('')\n\n    useEffect(() => {\n        fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response => response.json())\n        .then(users => setMonsters(users))\n    }, [])\n\n    const filterMonsters = () => {\n        const filteredMonsters = monsters.filter(monster => \n            monster.name.toLowerCase().includes(searchTerm.toLowerCase())\n        )\n\n        return filteredMonsters\n    }\n\n    return (\n        <div className='App'>\n            <h1>Monsters Rolodex</h1>\n            <SearchBox handleChange={e => setSearchTerm(e.target.value)} placeholder='Search Monsters' />\n            <CardList monsters={filterMonsters()} />\n        </div>\n    )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}